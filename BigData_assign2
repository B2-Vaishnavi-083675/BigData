1)

CREATE TABLE movies_recc_staging(
userId INT,
movieId INT,
rating DOUBLE,
rtime BIGINT
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
TBLPROPERTIES('skip.header.line.count'='1');





CREATE TABLE movies_recc(
userId INT,
movieId int,
rating DOUBLE,
rtime BIGINT
)
STORED AS ORC
TBLPROPERTIES('transactional'='true');


INSERT INTO movies_recc 
SELECT * FROM movies_recc_staging;


SELECT m1.userId,m1.movieId,m1.rating ,m2.movieId  ,m2.rating FROM movies_recc m1 INNER JOIN movies_recc m2 ON m1.userId=m2.userId 
WHERE m1.movieId>m2.movieId ;

CREATE TABLE corr_movies_recc AS
SELECT m1.userId u1,m1.movieId m1,m1.rating r1,m2.movieId m2 ,m2.rating r2 FROM movies_recc m1 INNER JOIN movies_recc m2 ON m1.userId=m2.userId 
WHERE m1.movieId>m2.movieId ;


CREATE TABLE corr_table_movies_recc AS 
SELECT m1,m2 ,COUNT(m1) CNT ,CORR(r1,r2) FROM corr_movies_recc 
GROUP BY m1,m2;


SELECT t1.movieId m1, t2.movieId m2, t1.rating r1, t2.rating r2 FROM ratings t1 INNER JOIN ratings t2 ON t1.userId = t2.userId
WHERE t1.movieId < t2.movieId;


CREATE TABLE cor_movies AS
SELECT t1.movieId m1, t2.movieId m2, t1.rating r1, t2.rating r2 FROM ratings t1 INNER JOIN ratings t2 ON t1.userId = t2.userId
WHERE t1.movieId < t2.movieId;


CREATE TABLE cor_table AS
SELECT m1, m2, COUNT(m1) cnt, CORR(r1,r2) cor FROM cor_movies
GROUP BY m1, m2
HAVING CORR(r1,r2) IS NOT NULL;


SELECT movies.id,movies.title,cor_table.cor FROM movies INNER JOIN cor_table ON movies.id=cor_table.m1 WHERE cor_table.cor>0.5 LIMIT 5;

+------------+-------------------+---------------------+
| movies.id  |   movies.title    |    cor_table.cor    |
+------------+-------------------+---------------------+
| 1          | Toy Story (1995)  | 0.5070925528371102  |
| 1          | Toy Story (1995)  | 0.7191078384923528  |
| 1          | Toy Story (1995)  | 1.0                 |
| 1          | Toy Story (1995)  | 0.9999999999999999  |
| 1          | Toy Story (1995)  | 0.5000000000000001  |
+------------+-------------------+---------------------+


2) Execute following queries on "emp" and "dept" dataset.

1. Create table "emp_staging" and load data from emp.csv in it.
	+--------------------+--------------------+------------------+------------------+-------------------+------------------+-------------------+---------------------+
	| emp_staging.empno  | emp_staging.ename  | emp_staging.job  | emp_staging.mgr  | emp_staging.hire  | emp_staging.sal  | emp_staging.comm  | emp_staging.deptno  |
	+--------------------+--------------------+------------------+------------------+-------------------+------------------+-------------------+---------------------+
	| 7369               | SMITH              | CLERK            | 7902             | 1980-12-17        | 800.0            | NULL              | 20                  |
	| 7499               | ALLEN              | SALESMAN         | 7698             | 1981-02-20        | 1600.0           | 300.0             | 30                  |
	| 7521               | WARD               | SALESMAN         | 7698             | 1981-02-22        | 1250.0           | 500.0             | 30                  |
	| 7566               | JONES              | MANAGER          | 7839             | 1981-04-02        | 2975.0           | NULL              | 20                  |
	| 7654               | MARTIN             | SALESMAN         | 7698             | 1981-09-28        | 1250.0           | 1400.0            | 30                  |
	| 7698               | BLAKE              | MANAGER          | 7839             | 1981-05-01        | 2850.0           | NULL              | 30                  |
	| 7782               | CLARK              | MANAGER          | 7839             | 1981-06-09        | 2450.0           | NULL              | 10                  |
	| 7788               | SCOTT              | ANALYST          | 7566             | 1982-12-09        | 3000.0           | NULL              | 20                  |
	| 7839               | KING               | PRESIDENT        | NULL             | 1981-11-17        | 5000.0           | NULL              | 10                  |
	| 7844               | TURNER             | SALESMAN         | 7698             | 1981-09-08        | 1500.0           | 0.0               | 30                  |
	| 7876               | ADAMS              | CLERK            | 7788             | 1983-01-12        | 1100.0           | NULL              | 20                  |
	| 7900               | JAMES              | CLERK            | 7698             | 1981-12-03        | 950.0            | NULL              | 30                  |
	| 7902               | FORD               | ANALYST          | 7566             | 1981-12-03        | 3000.0           | NULL              | 20                  |
	| 7934               | MILLER             | CLERK            | 7782             | 1982-01-23        | 1300.0           | NULL              | 10                  |
	+--------------------+--------------------+------------------+------------------+-------------------+------------------+-------------------+---------------------+

2. Create table "dept_staging" and load data from dept.csv in it.
	+----------------------+---------------------+-------------------+
	| dept_staging.deptno  | dept_staging.dname  | dept_staging.loc  |
	+----------------------+---------------------+-------------------+
	| 10                   | ACCOUNTING          | NEW YORK          |
	| 20                   | RESEARCH            | DALLAS            |
	| 30                   | SALES               | CHICAGO           |
	| 40                   | OPERATIONS          | BOSTON            |
	+----------------------+---------------------+-------------------+
	4 rows selected (0.142 seconds)

3. Display dept name and number of emps in each dept.
	select d.dname,COUNT(e.empno) FROM dept_staging d
    JOIN emp_staging e ON d.deptno = e.deptno
    GROUP BY d.dname;
       
    	+-------------+------+
	|   d.dname   | _c1  |
	+-------------+------+
	| ACCOUNTING  | 3    |
	| RESEARCH    | 5    |
	| SALES       | 6    |
	+-------------+------+

4. Display emp name and his dept name.
    select e.ename,d.dname FROM dept_staging d
    JOIN emp_staging e ON d.deptno = e.deptno;
	+----------+-------------+
	| e.ename  |   d.dname   |
	+----------+-------------+
	| SMITH    | RESEARCH    |
	| ALLEN    | SALES       |
	| WARD     | SALES       |
	| JONES    | RESEARCH    |
	| MARTIN   | SALES       |
	| BLAKE    | SALES       |
	| CLARK    | ACCOUNTING  |
	| SCOTT    | RESEARCH    |
	| KING     | ACCOUNTING  |
	| TURNER   | SALES       |
	| ADAMS    | RESEARCH    |
	| JAMES    | SALES       |
	| FORD     | RESEARCH    |
	| MILLER   | ACCOUNTING  |
	+----------+-------------+

5. Display all emps (name, job, deptno) with their manager (name, job, deptno), who are not in their department.
	 select e.ename,e.job,e.deptno,m.ename,m.job,m.deptno FROM emp_staging e JOIN  emp_staging m ON e.mgr = m.empno WHERE e.deptno != m.deptno;

	+----------+----------+-----------+----------+------------+-----------+
	| e.ename  |  e.job   | e.deptno  | m.ename  |   m.job    | m.deptno  |
	+----------+----------+-----------+----------+------------+-----------+
	| JONES    | MANAGER  | 20        | KING     | PRESIDENT  | 10        |
	| BLAKE    | MANAGER  | 30        | KING     | PRESIDENT  | 10        |
	+----------+----------+-----------+----------+------------+-----------+

6. Display all manager names with list of all dept names (where they can work).
	SELECT e.ename,e.mgr,d.dname FROM emp_staging e JOIN dept_staging d ON e.deptno = d.deptno WHERE e.job='MANAGER';
	+----------+--------+-------------+
	| e.ename  | e.mgr  |   d.dname   |
	+----------+--------+-------------+
	| JONES    | 7839   | RESEARCH    |
	| BLAKE    | 7839   | SALES       |
	| CLARK    | 7839   | ACCOUNTING  |
	+----------+--------+-------------+


7. Display job-wise total salary along with total salary of all employees.
	SELECT job,SUM(sal) FROM emp_staging GROUP BY JOB WITH ROLLUP;
	+------------+----------+
	|    job     |   _c1    |
	+------------+----------+
	| NULL       | 29025.0  |
	| ANALYST    | 6000.0   |
	| CLERK      | 4150.0   |
	| MANAGER    | 8275.0   |
	| PRESIDENT  | 5000.0   |
	| SALESMAN   | 5600.0   |
	+------------+----------+

8. Display dept-wise total salary along with total salary of all employees.
	SELECT deptno,SUM(sal) FROM emp_staging GROUP BY deptno WITH ROLLUP;	
	+---------+----------+
	| deptno  |   _c1    |
	+---------+----------+
	| NULL    | 29025.0  |
	| 10      | 8750.0   |
	| 20      | 10875.0  |
	| 30      | 9400.0   |
	+---------+----------+


9. Display per dept job-wise total salary along with total salary of all employees.
	SELECT deptno,JOB,SUM(sal) FROM emp_staging GROUP BY deptno,job WITH CUBE;
	+---------+------------+----------+
	| deptno  |    job     |   _c2    |
	+---------+------------+----------+
	| NULL    | NULL       | 29025.0  |
	| 10      | NULL       | 8750.0   |
	| 20      | NULL       | 10875.0  |
	| 30      | NULL       | 9400.0   |
	| NULL    | ANALYST    | 6000.0   |
	| 20      | ANALYST    | 6000.0   |
	| NULL    | CLERK      | 4150.0   |
	| 10      | CLERK      | 1300.0   |
	| 20      | CLERK      | 1900.0   |
	| 30      | CLERK      | 950.0    |
	| NULL    | MANAGER    | 8275.0   |
	| 10      | MANAGER    | 2450.0   |
	| 20      | MANAGER    | 2975.0   |
	| 30      | MANAGER    | 2850.0   |
	| NULL    | PRESIDENT  | 5000.0   |
	| 10      | PRESIDENT  | 5000.0   |
	| NULL    | SALESMAN   | 5600.0   |
	| 30      | SALESMAN   | 5600.0   |
	+---------+------------+----------+


10. Display number of employees recruited per year in descending order of employee count.
	select YEAR(hire), COUNT(empno) cnt FROM emp_staging GROUP BY YEAR(hire) ORDER by cnt DESC

	+-------+------+
	|  _c0  | cnt  |
	+-------+------+
	| 1981  | 10   |
	| 1982  | 2    |
	| 1983  | 1    |
	| 1980  | 1    |
	+-------+------+


11. Display unique job roles who gets commission.
	select job from emp_staging WHERE comm IS NOT NULL GROUP BY job;

	+-----------+
	|    job    |
	+-----------+
	| SALESMAN  |
	+-----------+


12. Display dept name in which there is no employee (using sub-query).
	select dname FROM dept_staging WHERE deptno NOT IN (select deptno FROM emp_staging )
	+-------------+
	|    dname    |
	+-------------+
	| OPERATIONS  |
	+-------------+

13. Display emp-name, dept-name, salary, total salary of that dept (using sub-query).
	select e.ename,(SELECT dname FROM dept_staging d  WHERE e.deptno=d.deptno) dept_name,sal,(select SUM(e1.sal) from emp_staging e1 WHERE e1.job = e.job) as total_sal FROM emp_staging e;
	+----------+-------------+---------+---------+
	| e.ename  |    dname    |   sal   |  total  |
	+----------+-------------+---------+---------+
	| SMITH    | RESEARCH    | 800.0   | 4150.0  |
	| ALLEN    | SALES       | 1600.0  | 5600.0  |
	| WARD     | SALES       | 1250.0  | 5600.0  |
	| JONES    | RESEARCH    | 2975.0  | 8275.0  |
	| MARTIN   | SALES       | 1250.0  | 5600.0  |
	| BLAKE    | SALES       | 2850.0  | 8275.0  |
	| CLARK    | ACCOUNTING  | 2450.0  | 8275.0  |
	| SCOTT    | RESEARCH    | 3000.0  | 6000.0  |
	| KING     | ACCOUNTING  | 5000.0  | 5000.0  |
	| TURNER   | SALES       | 1500.0  | 5600.0  |
	| ADAMS    | RESEARCH    | 1100.0  | 4150.0  |
	| JAMES    | SALES       | 950.0   | 4150.0  |
	| FORD     | RESEARCH    | 3000.0  | 6000.0  |
	| MILLER   | ACCOUNTING  | 1300.0  | 4150.0  |
	+----------+-------------+---------+---------+


14. Display all managers and presidents along with number of (immediate) subbordinates.
	SELECT e1.ENAME,COUNT(e2.empno) cn FROM emp_staging e1 LEFT JOIN emp_staging e2 ON e1.empno=e2.mgr WHERE e1.joB IN ('MANAGER','PRESIDENT') GROUP BY e1.ename HAVING cn<>0;

	+-----------+-----+
	| e1.ename  | cn  |
	+-----------+-----+
	| BLAKE     | 5   |
	| CLARK     | 1   |
	| JONES     | 2   |
	| KING      | 3   |
	+-----------+-----+


3. Execute following queries on "emp" and "dept" dataset using CTE.
1. Find emp with max sal of each dept.
	with emp_max AS (select d.deptno, MAX(e.sal) as MAXSAL from emp_staging e INNER JOIN dept_staging d ON e.deptno = d.deptno GROUP BY d.deptno)
	SELECT d.dname,e.ename,e.sal from emp_max em
	INNER JOIN emp_staging e ON e.deptno = em.deptno AND e.sal = em.MAXSAL
	INNER JOIN dept_staging d ON d.deptno = em.deptno;

	+-------------+----------+---------+
	|   d.dname   | e.ename  |  e.sal  |
	+-------------+----------+---------+
	| ACCOUNTING  | KING     | 5000.0  |
	| RESEARCH    | SCOTT    | 3000.0  |
	| RESEARCH    | FORD     | 3000.0  |
	| SALES       | BLAKE    | 2850.0  |
	+-------------+----------+---------+

2. Find avg of deptwise total sal.
	WITH emp_avg AS (SELECT deptno, AVG(sal) as avg_sal FROM emp_staging GROUP BY deptno)
	SELECT d.dname,a.avg_sal FROM emp_avg a
	INNER JOIN dept_staging d ON d.deptno = a.deptno
	+-------------+---------------------+
	|   d.dname   |      a.avg_sal      |
	+-------------+---------------------+
	| ACCOUNTING  | 2916.6666666666665  |
	| RESEARCH    | 2175.0              |
	| SALES       | 1566.6666666666667  |
	+-------------+---------------------+

3. Compare (show side-by-side) sal of each emp with avg sal in his dept and avg sal for his job.
	WITH cte_emp_avg AS 
	(select ename,Avg(sal) OVER(PARTITION BY  deptno) as avg_sal , 
	Avg(sal) OVER(PARTITION BY job) from emp_staging) 
	select * from cte_emp_avg;
	+--------------------+----------------------+---------------------+
	| cte_emp_avg.ename  | cte_emp_avg.avg_sal  |   cte_emp_avg._c2   |
	+--------------------+----------------------+---------------------+
	| SCOTT              | 2175.0               | 3000.0              |
	| FORD               | 2175.0               | 3000.0              |
	| JOHN               | 3000.0               | 1691.6666666666667  |
	| JOHN               | 3000.0               | 1691.6666666666667  |
	| JAMES              | 1566.6666666666667   | 1691.6666666666667  |
	| ADAMS              | 2175.0               | 1691.6666666666667  |
	| SMITH              | 2175.0               | 1691.6666666666667  |
	| MILLER             | 2916.6666666666665   | 1691.6666666666667  |
	| CLARK              | 2916.6666666666665   | 2758.3333333333335  |
	| JONES              | 2175.0               | 2758.3333333333335  |
	| BLAKE              | 1566.6666666666667   | 2758.3333333333335  |
	| KING               | 2916.6666666666665   | 5000.0              |
	| WARD               | 1566.6666666666667   | 1400.0              |
	| MARTIN             | 1566.6666666666667   | 1400.0              |
	| TURNER             | 1566.6666666666667   | 1400.0              |
	| ALLEN              | 1566.6666666666667   | 1400.0              |
	+--------------------+----------------------+---------------------+

	
	
4. Divide emps by category -- Poor < 1500, 1500 <= Middle <= 2500, Rich > 2500. Hint: CASE ... WHEN. Count emps for each category.
	WITH EmpCategories AS (
	    SELECT
		CASE
		    WHEN sal < 1500 THEN 'Poor'
		    WHEN sal >= 1500 AND sal <= 2500 THEN 'Middle'
		    WHEN sal > 2500 THEN 'Rich'
		END AS category,
		COUNT(*) AS emp_count
	    FROM emp_staging
	    GROUP BY
		CASE
		    WHEN sal < 1500 THEN 'Poor'
		    WHEN sal >= 1500 AND sal <= 2500 THEN 'Middle'
		    WHEN sal > 2500 THEN 'Rich'
		END
	)
	SELECT category, emp_count
	FROM EmpCategories;
	+-----------+------------+
	| category  | emp_count  |
	+-----------+------------+
	| Middle    | 3          |
	| Poor      | 6          |
	| Rich      | 7          |
	+-----------+------------+



5. Display emps with category (as above), empno, ename, sal and dname.
	WITH EmpCategories AS (
	    SELECT
		empno,
		ename,
		sal,
		dname,
		CASE
		    WHEN sal < 1500 THEN 'Poor'
		    WHEN sal >= 1500 AND sal <= 2500 THEN 'Middle'
		    WHEN sal > 2500 THEN 'Rich'
		END AS category
	    FROM emp_staging emp
	    JOIN dept_staging dept ON emp.deptno = dept.deptno
	)
	SELECT empno, ename, sal, dname, category
	FROM EmpCategories;
	+--------+---------+---------+-------------+-----------+
	| empno  |  ename  |   sal   |    dname    | category  |
	+--------+---------+---------+-------------+-----------+
	| 7369   | SMITH   | 800.0   | RESEARCH    | Poor      |
	| 7499   | ALLEN   | 1600.0  | SALES       | Middle    |
	| 7521   | WARD    | 1250.0  | SALES       | Poor      |
	| 7566   | JONES   | 2975.0  | RESEARCH    | Rich      |
	| 7654   | MARTIN  | 1250.0  | SALES       | Poor      |
	| 7698   | BLAKE   | 2850.0  | SALES       | Rich      |
	| 7782   | CLARK   | 2450.0  | ACCOUNTING  | Middle    |
	| 7788   | SCOTT   | 3000.0  | RESEARCH    | Rich      |
	| 7839   | KING    | 5000.0  | ACCOUNTING  | Rich      |
	| 7844   | TURNER  | 1500.0  | SALES       | Middle    |
	| 7876   | ADAMS   | 1100.0  | RESEARCH    | Poor      |
	| 7900   | JAMES   | 950.0   | SALES       | Poor      |
	| 7902   | FORD    | 3000.0  | RESEARCH    | Rich      |
	| 7934   | MILLER  | 1300.0  | ACCOUNTING  | Poor      |
	+--------+---------+---------+-------------+-----------+

6. Count number of emps in each dept for each category (as above).
	 WITH EmpCategories AS (
	    SELECT
		empno,
		ename,
		sal,
		dname,
		CASE
		    WHEN sal < 1500 THEN 'Poor'
		    WHEN sal >= 1500 AND sal <= 2500 THEN 'Middle'
		    WHEN sal > 2500 THEN 'Rich'
		END AS category
	    FROM emp_staging emp
	    JOIN dept_staging dept ON emp.deptno = dept.deptno
	)
	SELECT dname, category, COUNT(empno) AS emp_count
	FROM EmpCategories
	GROUP BY dname, category
	ORDER BY dname, category;
	+-------------+-----------+------------+
	|    dname    | category  | emp_count  |
	+-------------+-----------+------------+
	| ACCOUNTING  | Middle    | 1          |
	| ACCOUNTING  | Poor      | 1          |
	| ACCOUNTING  | Rich      | 1          |
	| RESEARCH    | Poor      | 2          |
	| RESEARCH    | Rich      | 3          |
	| SALES       | Middle    | 2          |
	| SALES       | Poor      | 3          |
	| SALES       | Rich      | 1          |
	+-------------+-----------+------------+


4. Execute following queries for books.csv dataset.

1. Create table "books_staging" and load books.csv in it.
	CREATE TABLE books_staging(
	id INT,
	name VARCHAR(100),
	author VARCHAR(50),
	subject VARCHAR (100),
	price DECIMAL(10,2)
	)
	ROW FORMAT DELIMITED
	FIELDS TERMINATED BY ','
	STORED AS TEXTFILE;

	LOAD DATA LOCAL INPATH '/home/vaishnavi/Desktop/BigData/data/books.csv' INTO TABLE books_staging;

	+-------------------+----------------------------------+-----------------------+------------------------+----------------------+
	| books_staging.id  |        books_staging.name        | books_staging.author  | books_staging.subject  | books_staging.price  |
	+-------------------+----------------------------------+-----------------------+------------------------+----------------------+
	| 1001              | Exploring C                      | Yashwant Kanetkar     | C Programming          | 123.46               |
	| 1002              | Pointers in C                    | Yashwant Kanetkar     | C Programming          | 371.02               |
	| 1003              | ANSI C Programming               | E Balaguruswami       | C Programming          | 334.22               |
	| 1004              | ANSI C Programming               | Dennis Ritchie        | C Programming          | 140.12               |
	| 2001              | C++ Complete Reference           | Herbert Schildt       | C++ Programming        | 417.76               |
	| 2002              | C++ Primer                       | Stanley Lippman       | C++ Programming        | 620.67               |
	| 2003              | C++ Programming Language         | Bjarne Stroustrup     | C++ Programming        | 987.21               |
	| 3001              | Java Complete Reference          | Herbert Schildt       | Java Programming       | 525.12               |
	| 3002              | Core Java Volume I               | Cay Horstmann         | Java Programming       | 575.65               |
	| 3003              | Java Programming Language        | James Gosling         | Java Programming       | 458.24               |
	| 4001              | Operatig System Concepts         | Peter Galvin          | Operating Systems      | 567.39               |
	| 4002              | Design of UNIX Operating System  | Mauris J Bach         | Operating Systems      | 421.94               |
	| 4003              | UNIX Internals                   | Uresh Vahalia         | Operating Systems      | 352.82               |
	+-------------------+----------------------------------+-----------------------+------------------------+----------------------


2. Create table "books_orc" as transactional table.
	CREATE TABLE books_orc(
	id INT,
	name VARCHAR(100),
	author VARCHAR(50),
	subject VARCHAR (100),
	price DECIMAL(10,2)
	)
	STORED AS ORC
	TBLPROPERTIES('transactional'='true');


	INSERT INTO books_orc
	SELECT id,name,author,subject,price FROM books_staging;

3. Create a materialized view for summary -- Subjectwise average book price.
	CREATE MATERIALIZED VIEW mv_books AS
	SELECT subject,AVG(price) FROM books_orc
	GROUP BY subject;

	select * from mv_books

4. Display a report that shows subject and average price in descending order -- on materialized view
	CREATE MATERIALIZED VIEW mv_books_sub AS
	SELECT subject,AVG(price) FROM books_orc
	GROUP BY subject ORDER BY subject DESC;

	+----------------------+---------------------------+
	| v_books_sub.subject  |      v_books_sub._c1      |
	+----------------------+---------------------------+
	| Operating Systems    | 447.38333333333333333333  |
	| Java Programming     | 519.67000000000000000000  |
	| C++ Programming      | 675.21333333333333333333  |
	| C Programming        | 242.20500000000000000000  |
	+----------------------+---------------------------+


5. Create a new file newbooks.csv.
	20,Atlas Shrugged,Ayn Rand,Novel,723.90
	21,The Fountainhead,Ayn Rand,Novel,923.80
	22,The Archer,Paulo Cohelo,Novel,623.94
	23,The Alchemist,Paulo Cohelo,Novel,634.80

CREATE TABLE newbooks(
id INT,
name VARCHAR(50),
author VARCHAR(50),
price DECIMAL(10,3)
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

6. Upload the file newbooks.csv into books_staging.
	LOAD DATA LOCAL INPATH '/home/vaishnavi/Big_D/newbooks.csv' INTO TABLE newbooks;

7. Insert "new" records from books_staging into books_orc.

8. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?

	SELECT * FROM mv_books_orc ORDER BY avgPrice DESC;
	+-----------------------+------------------------+
	| mv_books_orc.subject  | mv_books_orc.avgprice  |
	+-----------------------+------------------------+
	| C++ Programming       | 675.214                |
	| Java Programming      | 519.67                 |
	| Operating Systems     | 447.3836666666666      |
	| C Programming         | 242.20275              |
	+-----------------------+------------------------

9. Rebuild the materialized view.

10. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?
	SELECT * FROM mv_books_orc ORDER BY avgPrice DESC;
	+-----------------------+------------------------+
	| mv_books_orc.subject  | mv_books_orc.avgprice  |
	+-----------------------+------------------------+
	| Novel                 | 726.6099999999999      |
	| C++ Programming       | 675.214                |
	| Java Programming      | 519.67                 |
	| Operating Systems     | 447.3836666666666      |
	| C Programming         | 242.20275              |
	+-----------------------+------------------------+
11. Increase price of all Java books by 10% in books_orc.

12. Rebuild the materialized view.

13. Display a report that shows subject and average price in descending order -- on 
materialized view. -- Are new price changes visible in report?
	SELECT * FROM mv_books_orc ORDER BY avgPrice DESC;
	+-----------------------+------------------------+
	| mv_books_orc.subject  | mv_books_orc.avgprice  |
	+-----------------------+------------------------+
	| Novel                 | 799.271                |
	| C++ Programming       | 742.7353999999999      |
	| Java Programming      | 571.6370000000001      |
	| Operating Systems     | 492.1220333333334      |
	| C Programming         | 266.423025             |
	+-----------------------+------------------------+
	
14. Delete all Java books.
	DELETE FROM books_orc WHERE SUBJECT LIKE "Java%";
15. Rebuild the materialized view.
	ALTER materialized view mv_books_orc rebuild;
16. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new price changes visible in report?
	SELECT * FROM mv_books_orc ORDER BY avgPrice DESC;
	+-----------------------+------------------------+
	| mv_books_orc.subject  | mv_books_orc.avgprice  |
	+-----------------------+------------------------+
	| Novel                 | 799.271                |
	| C++ Programming       | 742.7353999999999      |
	| Operating Systems     | 492.1220333333334      |
	| C Programming         | 266.423025             |
	+-----------------------+------------------------+

5. Execute following queries for movies dataset.
1. Upload movies data (movies_caret.csv) into HDFS directory (not in hive warehouse).
	hadoop fs -mkdir -p /DATA/$USER/movies/input

	hadoop fs -put /home/vaishnavi/Big_D/movies/movies_caret.csv/DATA/$USER/movies/input

	hadoop fs -cat /DATA/$USER/movies/input/movies_caret.csv
2. Create external table movies1 with schema - id INT, title STRING, genres STRING.
Find number of 'Action' movies.
	CREATE EXTERNAL TABLE movies2(
	id INT,
	title STRING,
	genres ARRAY<STRING>
	)
	ROW FORMAT DELIMITED
	FIELDS TERMINATED BY '^'
	COLLECTION ITEMS TERMINATED BY '|'
	LOCATION '/DATA/sunbeam/movies/input'
	TBLPROPERTIES('skip.header.line.count'='1');

	SELECT count(*) FROM movies1
	WHERE ARRAY_CONTAINS(genres, 'Action');
	+-------+
	|  _c0  |
	+-------+
	| 1545  |
	+-------+
	
3. Create external table movies2 with schema - id INT, title STRING, genres ARRAY<STRING>.
Find number of movies having single genre.
	CREATE EXTERNAL TABLE movies2(
	id INT,
	title STRING,
	genres ARRAY<STRING>
	)
	ROW FORMAT DELIMITED
	FIELDS TERMINATED BY '^'
	COLLECTION ITEMS TERMINATED BY '|'
	LOCATION '/DATA/sunbeam/movies/input'
	TBLPROPERTIES('skip.header.line.count'='1');


	 select count(*) from movies2 where size(genres)=1;
	+-------+
	|  _c0  |
	+-------+
	| 2793  |
	+-------+

6. Upload busstops.json data into HDFS directory. Then create hive external table to fetch data using JsonSerDe.
	hadoop fs -mkdir -p /NewData/$USER/busstops/input


	hadoop fs -put /home/vaishnavi/Desktop/BigData/data/bus.json

	hadoop fs -cat /NewData/$USER/busstops/input/bus.json

	CREATE EXTERNAL TABLE bus_json(
	`_id` STRUCT<`$oid`:STRING>,
	stop STRING,
	code STRING,
	seq FLOAT,
	stage FLOAT,
	name STRING,
	location STRUCT<type:STRING, coordinates:ARRAY<DOUBLE>>
	)
	ROW FORMAT 
	SERDE 'org.apache.hive.hcatalog.data.JsonSerDe'
	LOCATION '/NewData/vaishnavi/busstops/input';

